version: '3.3'

services:

  ###########################
  ### mysql for dashboard ###
  ###########################
  db:
   image: mysql/mysql-server:8.0.0
   restart: always
   volumes:
    - ./mysql_data/:/var/lib/mysql/:rw
    - ./mysql_resources/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
   environment:
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: vre
    MYSQL_USER: vre_admin
    MYSQL_PASSWORD: sea.data.cloud
   networks:
    - vre_dash

  ################################
  ### SQL dump tool for backup ###
  ################################
  dumper:
   image: registry-sdc.argo.grnet.gr/mysql-cron:20191024
   restart: always
   volumes:
    - ./mysql_backups/dashboard_mysql/:/srv/mysql/backup
   environment:
    CRON_SCHEDULE: '10 * * * *' #optional, defaults to hourly.
    MAX_SECONDS_SINCE_LAST: 3610
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: vre
    MYSQL_USER: vre_admin
    MYSQL_PASSWORD: sea.data.cloud
    # optional
    #MYSQL_PORT: 3306
    #MYSQL_HOST: 'db'
   networks:
    - vre_dash
   healthcheck:
     test: "/healthcheck.sh"
     interval: 300s


  ########################
  ### VRE entrypoint:  ###
  ### dashboard        ###
  ########################
  dashboard:
   image: registry-sdc.argo.grnet.gr/vre_dashboard:20200429-3
   restart: always
   depends_on:
    - db
   ports:
    - "80" # Should run on http, no SSL, only locally, no port exposed to outside - SSL is done by reverse proxy!
   networks:
    - vre_dash
   environment:
    REVERSE_PROXY: 1
    VRE_SERVICES: rrr,p_extractor,p_explorer,o_extractor,o_explorer,extractor,import,qc,kill_wsodv,diva,divavip,viz,erddap,fileselector,bioqc
    NUM_DISTR: 1
    #
    # 1. Where odv can reach nextcloud over WebDAV from inside the ODV container
    # Use http://workspace... if both containers are in same docker-network
    # Use https://<server> if nextcloud runs somewhere outside
    NEXTCLOUD_URL_SAMEHOST: http://workspace/remote.php/webdav/
    NEXTCLOUD_URL: https://sdc-test.argo.grnet.gr/remote.php/webdav/
    # 
    # 2. Where the VRE tells Unity/B2ACCESS to call us back during authentication
    UNITY_REDIRECT: https://sdc-test.argo.grnet.gr/vre_login/unity/callback
    FORCE_ROOT_URL: sdc-test.argo.grnet.gr
    # 
    # 3. Where the VRE can reach the nextcloud (via SSH) to create a user during
    # registration (both local registration and Marine-ID authentication)
    NEXTCLOUD_SSH: workspace # must be the name of the service!
    # 
    # 4. URLs of the VRE services
    # Must be reachable from the client, as they are integrated using iframes
    # Can be comma-separated lists
    bioqc: https://jellyfish.argo.grnet.gr/bioqc/app_dev.php
    workspace: https://sdc-test.argo.grnet.gr:8001/index.php/apps/loginviapost/login
    fileselector: https://sdc-test.argo.grnet.gr:7788
    divavip: https://bluewhale.dkrz.de/divavip
    diva: https://bluewhale.dkrz.de/diva
    rrr: https://bluewhale.dkrz.de/rrr
    import: https://sdc-vre-stfc-01.rl.ac.uk:8191/import_service_init
    extractor: https://sdc-vre-stfc-01.rl.ac.uk:8191/sdc
    qc: https://sdc-test.argo.grnet.gr:8191/webodv
    p_extractor: https://sdc-test.argo.grnet.gr:8192/webodv
    p_explorer: https://sdc-test.argo.grnet.gr:8193/webodv
    o_extractor: https://sdc-test.argo.grnet.gr:8194/webodv
    o_explorer: https://sdc-test.argo.grnet.gr:8195/webodv
    kill_wsodv: https://sdc-vre-stfc-01.rl.ac.uk:8191/kill_wsodv
    erddap: https://jellyfish.argo.grnet.gr/erddap/hub/login?next
    viz: https://jellyfish.argo.grnet.gr/viz/rest/login
    syncer: http://syncer_proxy/sync/bidirectional/
    syncer_rsync: http://syncer_proxy/sync/to_remote/
    # 
    # 5. Does the service run behind a reverse proxy?
    # If , makes sure that the FORCE_ROOT_URL is used in all HTML links,
    # HTML forms etc. (served by Laravel) if service runs behind a
    # reverse proxy, i.e. forceRootUrl() is enforced in Laravel.
    # Please use 1 for true and 0 for false!
    REVERSE_PROXY: 1 # 1=true!
    #
    # 6. This URL is used in HTML links, HTML forms etc. (served by
    # Laravel) if service runs behind a reverse proxy, i.e. forceRootUrl()
    # is enforced in Laravel.
    # Please include the protocol, i.e. "https://".
    # Note: Only used if REVERSE_PROXY is true.
    FORCE_ROOT_URL: 'https://sdc-test.argo.grnet.gr'
    #FORCE_ROOT_URL: 'sdc-test.argo.grnet.gr'
    # 
    # 7. This makes sure that https is used in HTML links, HTML forms etc.
    # (served by Laravel) if service runs behind a reverse proxy, i.e.
    # forceScheme() is enforced in Laravel.
    # Note: Only used if REVERSE_PROXY is true.
    FORCE_SCHEME: 'https'
   labels:
    - vre

  #############
  ### nginx ###
  #############
  proxy_for_dashboard:
    image: nginx:1.17.10
    restart: always
    volumes:
      - ./nginx_dashboard.conf:/etc/nginx/conf.d/default.conf
      - ./HEALTH/healthcheck_nginx.sh:/bin/healthcheck.sh
      - ../cert/cert.pem:/etc/ssl/certs/myhost.crt:ro
      - ../cert/cert.key:/etc/ssl/private/myhost.key:ro
      - /var/vre-health/vre-health.json:/srv/vre/vre_health.json:ro
    ports:
      - "443:443"
      - "80:80"
    networks:
      - vre_dash
    depends_on:
      - dashboard
    healthcheck:
      test: ["CMD", "/bin/healthcheck.sh"]
      interval: 60s
      timeout: 30s
      retries: 5

  #################
  ### nextcloud ###
  #################

  workspace:
   image: registry-sdc.argo.grnet.gr/vre_nextcloud:20200426-1
   volumes:
     # which ones to keep for persistent? I think both, but not sure
     - /nfs-export:/var/www/html/data:rw
     - ./nextcloud:/var/www/html:rw
   restart: always
   ports:
     - "80"
   networks:
     - vre_dash
   environment:
    # Make sure that dashboard is allowed to access nextcloud:
    trusted_domains: 'sdc-test.argo.grnet.gr'
    # Make sure that the automatic detection of hostnames for redirects
    # (done by nextcloud) works also if nextcloud runs behind a reverse proxy.
    # Please see: https://github.com/nextcloud/server/blob/master/config/config.sample.php#L436
    overwritehost: 'sdc-test.argo.grnet.gr:8001'
    overwriteprotocol: 'https'

  #############
  ### nginx ###
  #############
  proxy_for_workspace:
    image: nginx:1.17.10
    restart: always
    volumes:
      - ./nginx_workspace.conf:/etc/nginx/conf.d/default.conf
      - ./nginx_workspace_http.conf:/etc/nginx/nginx.conf
      - ./HEALTH/healthcheck_nginx.sh:/bin/healthcheck.sh
      - ../cert/cert.pem:/etc/ssl/certs/myhost.crt:ro
      - ../cert/cert.key:/etc/ssl/private/myhost.key:ro
    ports:
      - "8001:443"
    networks:
      - vre_dash
    depends_on:
      - workspace
    healthcheck:
      test: ["CMD", "/bin/healthcheck.sh"]
      interval: 60s
      timeout: 30s
      retries: 5

networks:
  vre_dash:
    external: true

    
